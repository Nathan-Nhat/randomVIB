{"version":3,"sources":["start.js","Image.js","number.js","rolling.js","App.js","serviceWorker.js","index.js"],"names":["Start","onClickHandle","props","setRolling","class","type","onClick","this","handleKeys","onKeyEvent","Component","Image","src","alt","Number","intervalID","timeoutId","randomNumber","checkNumber","param","state","chuc","donvi","Math","floor","random","localStore","JSON","parse","localStorage","getItem","length","removeItem","backToStart","window","confirm","console","log","setInterval","setState","setTimeout","clearInterval","undefined","find","push","setItem","stringify","clearTimeout","Rolling","backtoStart","App","start","startRolling","clearHandles","id","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2QAGqBA,E,2MACjBC,cAAgB,WACZ,EAAKC,MAAMC,YAAW,I,wEAGtB,OACI,yBAAKC,MAAQ,OACT,yBAAKA,MAAM,6BACH,4BAAQC,KAAK,SAASD,MAAM,4BAA4BE,QAAWC,KAAKN,eAAxE,SACA,kBAAC,IAAD,CAAsBO,WAAY,CAAC,SAAUC,WAAYF,KAAKN,sB,GATnDS,aCOpBC,EARD,WACV,OACI,6BACE,yBAAKC,IAAI,2DAA2DC,IAAM,GAAGT,MAAM,gBCHxEU,E,YAIjB,WAAYZ,GACX,IAAD,8BACI,4CAAMA,KALVa,WAAa,EAIb,EAHAC,UAAY,EAGZ,EAFAC,aAAe,EAEf,EAQAC,YAAc,SAACC,GAAD,OAAWA,IAAU,EAAKF,cANpC,EAAKG,MAAQ,CACTC,KAAO,EACPC,MAAQ,GAJhB,E,iFASoB,IAAD,OACff,KAAKU,aAAeM,KAAKC,MAAsB,GAAhBD,KAAKE,UAAiB,EACrD,IAAIC,EAAaC,KAAKC,MAAMC,aAAaC,QAAQ,SAAWH,KAAKC,MAAMC,aAAaC,QAAQ,SAAW,GACvG,GAAIJ,EAAWK,OAAS,SAQpB,GAFAF,aAAaG,WAAW,QACxBzB,KAAKL,MAAM+B,cACRC,OAAOC,QAAQ,gDAEd,OAGRC,QAAQC,IAAI9B,KAAKU,cACjBmB,QAAQC,IAAI,aACZ9B,KAAKQ,WAAauB,aAAY,WAC1B,EAAKC,SAAS,CAAClB,KAAME,KAAKC,MAAsB,EAAhBD,KAAKE,UACrCH,MAAQC,KAAKC,MAAsB,GAAhBD,KAAKE,cACzB,IACHlB,KAAKS,UAAYwB,YAAW,WAIhB,IAHRC,cAAc,EAAK1B,YAEXqB,QAAQC,IAAIX,KAEZ,CACI,QAA0CgB,IAAtChB,EAAWiB,KAAK,EAAKzB,aAA2B,CACpD,EAAKqB,SAAS,CACVlB,KAAOE,KAAKC,MAAM,EAAKP,aAAa,IACpCK,MAAQC,KAAKC,MAAM,EAAKP,aAAa,MAErCS,EAAWkB,KAAK,EAAK3B,cACrBY,aAAagB,QAAQ,OAAQlB,KAAKmB,UAAUpB,IAChD,MAEA,EAAKT,aAAeM,KAAKC,MAAsB,GAAhBD,KAAKE,UAAiB,KAE9D,O,6CAIPgB,cAAclC,KAAKQ,YACnBgC,aAAaxC,KAAKS,a,+BAEZ,IAAD,EACiBT,KAAKa,MAApBC,EADF,EACEA,KAAMC,EADR,EACQA,MACb,OACA,yBAAKlB,MAAQ,OACT,yBAAKA,MAAQ,2BACT,yBAAKA,MAAM,aAAY,0BAAMA,MAAQ,UAAUiB,KAEnD,yBAAKjB,MAAQ,2BACT,yBAAKA,MAAM,aAAY,0BAAMA,MAAQ,UAAUkB,U,GApE3BZ,aCIfsC,E,2MACjB/C,cAAgB,WACZ,EAAKC,MAAM+C,e,wEAGX,OACI,yBAAK7C,MAAQ,mBACT,yBAAKA,MAAQ,UACT,kBAAC,EAAD,OAEJ,yBAAKA,MAAQ,2BACT,kBAAC,EAAD,CAAQ6B,YAAe1B,KAAKN,iBAEhC,yBAAKG,MAAQ,UACT,4BAAQC,KAAK,SAASD,MAAM,4BAA4BE,QAAWC,KAAKN,eAAxE,SAEJ,kBAAC,IAAD,CAAsBO,WAAY,CAAC,SAAUC,WAAYF,KAAKN,qB,GAhBzCS,aCAhBwC,E,YACjB,WAAYhD,GACX,IAAD,8BACI,4CAAMA,KAKV+B,YAAc,WACV,EAAKM,SAAS,CAACY,OAAQ,KAP3B,EASAC,aAAe,WACX,EAAKb,SAAS,CAACY,OAAQ,KAV3B,EAYAE,aAAe,WACRnB,OAAOC,QAAQ,mCAEVN,aAAaG,WAAW,QACxB,EAAKO,SAAS,CACVY,OAAQ,MAfpB,EAAK/B,MAAQ,CACT+B,OAAQ,GAHhB,E,sEAqBU,IACCA,EAAS5C,KAAKa,MAAd+B,MACP,OACI,6BACG,yBAAKG,GAAG,UAAUlD,MAAM,wCACnB,yBAAKA,MAAM,mBACP,yBAAKA,MAAM,2CACI,IAAV+C,EAAgB,kBAAC,EAAD,CAAOhD,WAAcI,KAAK6C,eAAkB,kBAAC,EAAD,CAASH,YAAe1C,KAAK0B,eAE9F,4BAAQ5B,KAAK,SAASD,MAAM,2BAA2BE,QAAWC,KAAK8C,cAAvE,OAGR,kBAAC,IAAD,CAAsB7C,WAAY,CAAC,OAAQC,WAAYF,KAAK8C,oB,GAnC3C3C,aCMb6C,QACW,cAA7BrB,OAAOsB,SAASC,UAEe,UAA7BvB,OAAOsB,SAASC,UAEhBvB,OAAOsB,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.ef666627.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport './App.css';\r\nimport KeyboardEventHandler from 'react-keyboard-event-handler';\r\nexport default class Start extends Component {\r\n    onClickHandle = ()=>{\r\n        this.props.setRolling(true);\r\n    }\r\n    render() {\r\n        return (\r\n            <div class = \"row\">\r\n                <div class=\"col_quay_so1 col-12 start\">\r\n                        <button type=\"button\" class=\"btn btn-primary col-inner\" onClick = {this.onClickHandle}>START</button>\r\n                        <KeyboardEventHandler handleKeys={['enter']} onKeyEvent={this.onClickHandle} />\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nconst Image = () => {\r\n    return (\r\n        <div>\r\n         \t<img src=\"https://cdn.iom.vn/uploads/20191115095248/title-vib.svg \" alt = \"\" class=\"img-fluid\"/>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Image;","import React, { Component } from 'react'\r\nimport './App.css'\r\nexport default class Number extends Component {\r\n    intervalID = 0;\r\n    timeoutId = 0;\r\n    randomNumber = 0;\r\n    constructor(props)\r\n    {\r\n        super(props);\r\n        this.state = {\r\n            chuc : 0,\r\n            donvi : 0\r\n        }\r\n    }\r\n\r\n    checkNumber = (param) => param === this.randomNumber;\r\n    componentDidMount(){\r\n        this.randomNumber = Math.floor(Math.random() * 27) + 1;\r\n        var localStore = JSON.parse(localStorage.getItem('test')) ? JSON.parse(localStorage.getItem('test')) : [];\r\n        if (localStore.length < 27)\r\n        {\r\n            \r\n        }\r\n        else\r\n        {\r\n            localStorage.removeItem('test');\r\n            this.props.backToStart();\r\n            if(window.confirm(\"Full of storage. Deleting data in storage...\"))\r\n            {\r\n                return;\r\n            }\r\n        }\r\n        console.log(this.randomNumber);\r\n        console.log(\"Did mount\");\r\n        this.intervalID = setInterval(()=>{ \r\n            this.setState({chuc: Math.floor(Math.random() * 3),\r\n            donvi : Math.floor(Math.random() * 10)}) \r\n        }, 50);\r\n        this.timeoutId = setTimeout(() => { \r\n            clearInterval(this.intervalID);\r\n                \r\n                    console.log(localStore);\r\n                    while(1)\r\n                    {\r\n                        if (localStore.find(this.checkNumber) === undefined){\r\n                        this.setState({\r\n                            chuc : Math.floor(this.randomNumber/10),\r\n                            donvi : Math.floor(this.randomNumber%10)\r\n                        })\r\n                            localStore.push(this.randomNumber);\r\n                            localStorage.setItem('test', JSON.stringify(localStore));\r\n                        break;\r\n                        }\r\n                        this.randomNumber = Math.floor(Math.random() * 27) + 1;\r\n                    }\r\n            }, 5000);\r\n    }\r\n\r\n    componentWillUnmount(){\r\n        clearInterval(this.intervalID);\r\n        clearTimeout(this.timeoutId);\r\n    }\r\n    render() {\r\n        const {chuc, donvi} = this.state;\r\n        return (\r\n        <div class = \"row\">\r\n            <div class = \"col_quay_so1 col-6 numm\">\r\n                <div class=\"col-inner\"><span class = \"number\">{chuc}</span></div>\r\n            </div>\r\n            <div class = \"col_quay_so1 col-6 numm\">\r\n                <div class=\"col-inner\"><span class = \"number\">{donvi}</span></div>\r\n            </div>\r\n        </div>\r\n        )\r\n        \r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport './App.css';\r\nimport Image from './Image'\r\nimport Number from './number'\r\nimport KeyboardEventHandler from 'react-keyboard-event-handler';\r\n\r\nexport default class Rolling extends Component {\r\n    onClickHandle = () =>{\r\n        this.props.backtoStart();\r\n    }\r\n    render() {\r\n        return (\r\n            <div class = \"row center_item\">\r\n                <div class = \"col-12\">\r\n                    <Image/>\r\n                </div>\r\n                <div class = \"col_quay_so1 col-8 numm\">\r\n                    <Number backToStart = {this.onClickHandle}/>\r\n                </div>\r\n                <div class = \"col-12\">\r\n                    <button type=\"button\" class=\"btn btn-primary col-inner\" onClick = {this.onClickHandle}>Back</button>\r\n                </div>\r\n                <KeyboardEventHandler handleKeys={['space']} onKeyEvent={this.onClickHandle} />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import './App.css';\nimport Start from './start'\nimport Rolling from './rolling'\nimport React, { Component } from 'react'\nimport KeyboardEventHandler from 'react-keyboard-event-handler';\n\nexport default class App extends Component {\n    constructor(props)\n    {\n        super(props);\n        this.state = {\n            start : true,\n        }\n    }\n    backToStart = () =>{\n        this.setState({start : true});\n    }\n    startRolling = () =>{\n        this.setState({start : false});\n    }\n    clearHandles = () =>{\n        if(window.confirm(\"Do you want to clear storage?\"))\n            {\n                localStorage.removeItem('test');\n                this.setState({\n                    start : true,\n                })\n            }\n    }\n    render() {\n        const {start} = this.state;\n        return (\n            <div>\n               <div id=\"wraper1\" class=\"wraper_quayso container-fluid wraper\"  >\n                    <div class=\"row full-height\" >\n                        <div class=\"box_quayso container align-self-center\">          \n                            {start === true? <Start setRolling = {this.startRolling}/> : <Rolling backtoStart = {this.backToStart}/>}\n                        </div>\n                        <button type=\"button\" class=\"btn btn-danger clear-btn\" onClick = {this.clearHandles}>X</button>\n                    </div>\n                </div>\n                <KeyboardEventHandler handleKeys={['del']} onKeyEvent={this.clearHandles} />\n            </div>\n        )\n    }\n}\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}